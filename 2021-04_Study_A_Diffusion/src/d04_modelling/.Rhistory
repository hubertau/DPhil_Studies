An
dim(An)
ls()
dim(user_ht)
output_filename
rm(list=ls())
ls9)
ls()
ls
source("/home/hubert/DPhil_Studies/2021-04_Study_A_Diffusion/src/d00_utils/util.R")
user_ht <- fread('../../data/02_intermediate/bispec_ready_counts_23.csv')
dim(user_ht)
h_edges <- user_ht
H=graph.data.frame(h_edges)
  S=simplify(H,remove.loops=FALSE,remove.multiple=TRUE)
  rm(h_edges)
  A=get.adjacency(H,names=TRUE, attr='weight')
  S=get.adjacency(S, attr = 'weight')
  
  # HUBERT NOTE: THIS NEXT LINE TREATS ENTRIES IN TARGET COLUMN AS HASHTAGS
  if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
  
  # 2021-07-13 HUBERT NOTE: OMG S IS ALL ONES. WEIGHT IS NOT READ IN.
  ht_mapping= colSums(S)>=min_user
  A=A[,ht_mapping]
  rm(S)
all_hashtags <- FALSE
if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
  
  # 2021-07-13 HUBERT NOTE: OMG S IS ALL ONES. WEIGHT IS NOT READ IN.
  ht_mapping= colSums(S)>=min_user
  A=A[,ht_mapping]
  rm(S)
  
  if (verbose){
    cat('graph constructed')
  }
verbose <- TRUE
if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
  
  # 2021-07-13 HUBERT NOTE: OMG S IS ALL ONES. WEIGHT IS NOT READ IN.
  ht_mapping= colSums(S)>=min_user
  A=A[,ht_mapping]
  rm(S)
  
  if (verbose){
    cat('graph constructed')
  }
H=graph.data.frame(h_edges)
  S=simplify(H,remove.loops=FALSE,remove.multiple=TRUE)
  rm(h_edges)
  A=get.adjacency(H,names=TRUE, attr='weight')
  S=get.adjacency(S, attr = 'weight')
  
  # HUBERT NOTE: THIS NEXT LINE TREATS ENTRIES IN TARGET COLUMN AS HASHTAGS
  if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
  
  # 2021-07-13 HUBERT NOTE: OMG S IS ALL ONES. WEIGHT IS NOT READ IN.
  ht_mapping= colSums(S)>=min_user
  A=A[,ht_mapping]
  rm(S)
  
  if (verbose){
    cat('graph constructed')
  }
biSpectralCoCluster_debug(user_ht, min_user = 10, k=100, verbose=TRUE)
An
An = H=graph.data.frame(h_edges)
  S=simplify(H,remove.loops=FALSE,remove.multiple=TRUE)
  rm(h_edges)
  A=get.adjacency(H,names=TRUE, attr='weight')
  S=get.adjacency(S, attr = 'weight')
  
  # HUBERT NOTE: THIS NEXT LINE TREATS ENTRIES IN TARGET COLUMN AS HASHTAGS
  if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
  
  # 2021-07-13 HUBERT NOTE: OMG S IS ALL ONES. WEIGHT IS NOT READ IN.
  ht_mapping= colSums(S)>=min_user
  A=A[,ht_mapping]
  rm(S)
  
  if (verbose){
    cat('graph constructed')
  
An = biSpectralCoCluster_debug(user_ht,min_user=10, k=100, verbose=TRUE)
H=graph.data.frame(h_edges)
h_edges
user_ht
h_edges <- user_ht
H=graph.data.frame(h_edges)
S=simplify(H,remove.loops=FALSE,remove.multiple=TRUE)
A=get.adjacency(H,names=TRUE, attr='weight')
  S=get.adjacency(S, attr = 'weight')
if (all_hashtags){
    mapping=grepl('#',V(H)$name)  
  }else{
    mapping=!grepl("^[0-9]+$", V(H)$name)
  }
  
  A=A[,mapping]
  S=S[,mapping]
  rm(H)
  A=A[!mapping,]
  S=S[!mapping,]
dim(S)
colSums(S)
clear
ht_mapping= colSums(S)>=50
X = A[,ht_mapping]
dim(X)
dim(X)
A = A[,ht_mapping]
Ucount=rowSums(A)
  HTcount=colSums(A)
  d1=1/sqrt(rowSums(A))
  d1[is.infinite(d1)]=0
  D1=Diagonal(n=dim(A)[1],x=d1)
  d2=1/sqrt(colSums(A))
  d2[is.infinite(d2)]=0  
  D2=Diagonal(n=dim(A)[2],x=d2)
  An=D1%*%A%*%D2
dim(An)
obj=factory(irlba)(An,nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
obj$u
obj=factory(irlba)(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
obj$u
res = irlba(An, nu=100, nv=100, maxit=3000, verbose=TRUE, work=2500)
obj=factory(irlba)(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
obj$res
factory <- function(fun)
  function(...) {
    warn <- err <- NULL
    res <- withCallingHandlers(
      tryCatch(fun(...), error=function(e) {
        err <<- conditionMessage(e)
        NULL
      }), warning=function(w) {
        warn <<- append(warn, conditionMessage(w))
        invokeRestart("muffleWarning")
      })
    list(res=res, warn=warn, err=err)
  }
obj=factory(irlba)(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
factory(irlba)
factory <- function(fun){
  function(...) {
    warn <- err <- NULL
    res <- withCallingHandlers(
      tryCatch(fun(...), error=function(e) {
        err <<- conditionMessage(e)
        NULL
      }), warning=function(w) {
        warn <<- append(warn, conditionMessage(w))
        invokeRestart("muffleWarning")
      })
    list(res=res, warn=warn, err=err)
  }
}
obj=factory(irlba)(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
obj = irlba(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
k=100
dim(An)
obj = irlba(An,k, nu=k,nv=k,maxit = 3000, verbose=verbose, work=2500)
typeof(obj$u)
